HTML 파일로서 Client 에게 응답을 주기

1. HTML 파일로 Response 날리기 

( Render : HTML 파일로서 reponse 를 줌 > 참고 Rendering 은 이러한 파일을 화면에 뿌리는 과정이다. )
기본적으로 아래와 같은 형태로 사용된다.
render ( request, HTML 문서 )


2. Template 분리

Model(DB)     Templates(Front)      View(데이터처리 및 Programming) 

MTV 분리에서 나오는 개념으로 다음과 같은 사유로 인해 분리되어 다뤄진다. 
(1) 웹  디자이너가 DB 의 내용을 실수로 삭제하거나 변경할 가능성이 있음
(2) 에러가 발생했을 때 모든 요소가 엉켜있으면 해결하는데 시간이 오래걸림 
    (만약, 화면은 잘나오는데 데이터가 이상(view), 데이터는 잘나오는데 화면이 이상(template))

Template 을 완전히 분리를 해줘야 사이트 관리에 용이하다. 예를들어 장고프로젝트 내부에 html 이 여기저기 더럽게 혹은 css 가 여기저기 더럽게 있을 경우 이를 관리하기 힘들며, 이는 Front 와의 공동작업시에 엄청 불편한 요소로 작용한다. 예를들어 경로문제 등.. 
이를 따로 폴더로 관리하는게 훨씬 깔끔하다. 
이를 위해 settings.py 에 'DIRS' 를 수정해주어야한다.
'DIRS' : [BASE_DIR/'template']   > template 과 관련된 설정들은 여기에 있다고 명시해줌

template 안에는 app 마다의 폴더로 해당 app 에 대한 html 파일만 존재하도록 배치해주는게 좋다!!
나중에 app 서비스 중단, 삭제시에 해당 폴더만 날리면 되기 때문이다!!





HTML (웹 프로그래밍 언어 :front 쪽)
===================================================================
  <h1> 케넨 이미지 </h1>
  <img src="kennen.png" width="100px">
===================================================================
  우선 HTML 구조에 대한 이해를 해보자
  - 태그 : h1, img
  - 속성 : src, width
  - 속성값 : kennen.png,  100px
  - 텍스트(외부로 노출되는글씨): 케넨 이미지


HTML 기본구조
==============================
<html>
    <head></head>
    <body></body> 
</html>
==============================
HTML 태그는 크게 두 개의 section 으로 나뉜다
 - head section : HTML 문서에 대한 정보 
 - body section : 페이지 내용에 대한 부분이 들어간다.

body section 에 쓰이는 태그를 또 2개로 분류할 수 있다. 
 - inline 태그 : 딱 그 내용만큼의 공간만 차지
 - block 태그  : 한줄 전체의 공간을 차지
 
앞으로 수업에서 사용할 태그들 : h, table, a, link, img, input, select, button, textarea, form(form 태그는 따로 다루겠습니다)




