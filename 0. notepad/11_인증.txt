■ 인증 (Authentication)
Customizing : 사용자에 따라서 설정함
예를 들어 "나는 유저한테 point 를 줄거야, 사진첩을 만들어줄래" 와 같은 방식으로
User 라면 가지고 있어야하는 필드를 부여하고 싶다면 아래와 같은 방법을 사용하세요!!
================================================================
from django.contrib.auth.models import AbstractUser

class User(AbstractUser):
    pass
================================================================
※ 기본적으로 username 과 password 를 가지고 있습니다.
부가적인 필드는 User 의 필드로 정의해주면 된다.

★ 다음으로 settings.py 에 다음과 작성한 뒤 마이그레이션을 해야합니다.
====================================
AUTH_USER_MODEL = "app.User" [앱 이름].[유저 클래스 이름]
====================================



■ 로그인
================================================================
from django.contrib.auth import authenticate, login

def login_user(requeset):
     un = request.POST.get("username")
     pw = request.POST.get("password")
     user = authenticate(username=un, password=pw)
     if user:
	 login(request, user)
     ...          
================================================================
- authenticate 는 사용자의 username, password 를 통해서 인증을 한다.
  이 때, password 는 django 에서 사용하는 암호화 알고리즘으로 암호화 되어 있다.
만약 일치하는 정보가 없다면 None 을 반환하지만, 있다면 해당 User 의 레코드가 반환된다.

- login 은 request 에 user 를 실어주는 역할을 한다.
  인증된 사용자라면 request 에 user 로 접근해서 user 의 속성에 접근할 수 있다.



■ 로그인된 사용자 식별
user 의 is_authenticated 를 통해서 확인할 수 있습니다. 
로그인한 사용자의 화면과 하지않은 사용자의 화면을 분리해주고 싶을 때, HTML 에서 다음과 같이 작성합니다.
===========================================
{% if user.is_authenticated %}
	로그인된 사용자화면
{% else %}
	로그인되지 않은 사용자화면
{% endif %}
===========================================


■ 로그아웃
로그아웃은 간단합니다.
===========================================
from django.contrib.auth import logout

def logout_user(request):
    logout(request)
===========================================




♠ 인증에서의 CRUD
 - 일반 CRUD 와 다른 점은 전달하고자 하는 인자전달부분!!
 - 왜냐하면 request 안에 user 가 이미 들어있기 때문! 


■ 회원가입
form 태그를 이용해서 username 과 password 를 입력받는 부분, 전달하는 부분은 여느 Create 와 같다.
===================================================================
def register(request):
    .....
    User.objects.create_user(username=un, password=pw)
===================================================================
만약 create_user 를 사용하지 않고, User(username=un, password=pw).save() 를 했을 때
password 가 암호화되지 않게 들어가기 때문에 authenticate 를 사용할 수 없습니다.

※ username 은 Unique field 이기 때문에 중첩됬을 때 에러가 납니다.
우선은 중복되지 않게 가입하도록 해주세요! (에러 컨트롤은 나중에 배울게요)


■ 회원정보보기
===================================================================
def userinfo(request):
    return render(request, "acc/info.html")
===================================================================
넘기는 인자가 없는거 처럼 보이지만, request 안에 전부 들어있으므로

===================================================================
{{ user.username }}
{{ user.point }}
===================================================================
다음과 같이 그냥 접근해도됨!



■ 회원정보수정
 - 기존의 update 와 다른 점은 password 를 수정하는 방법이다. (암호화관련!!)
 - 그리고, password 수정시에는 무조건 로그아웃 상태가 된다!!

===================================================================
user.point = 100    # password 를 제외한 정보들은 다음과 같이 평범하게 하면된다.
user.save()
===================================================================

===================================================================
user.password = "123"
user.save()                                     
===================================================================
이렇게 설정할 경우 패스워드가 평문으로 들어가며 다시 로그인 불가능 상태가 된다.

===================================================================
user.set_password("123")
===================================================================
위와 같이 설정을 해주어야 패스워드가 변경된다.
하지만, 패스워드 변경시에는 로그아웃이 되기 때문에 자연스럽게 이어주기 위해서는 재로그인이 이루어져야한다.

===================================================================
def user_update(request):
    user = request.user
    user.username = "kennen"
    user.set_password("123")
    user.save() # password 를 제외한 정보는 save 가 꼭필요함
    login(request, user) # 정보만 바뀌고 유지되도록~
    ...
===================================================================



■ 회원삭제
 - 삭제는 언제나 간단하다
===================================================================
def user_delete(request):
     request.user.delete()
     ....
===================================================================














